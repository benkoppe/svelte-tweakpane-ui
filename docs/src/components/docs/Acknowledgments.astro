---
import { type CollectionEntry, getCollection } from 'astro:content'

type Props = {
	scope: 'all' | 'docs' | 'lib'
}

function titleCase(text: string) {
	return text
		.split(' ')
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
		.join(' ')
}

function stopShouting(text: string) {
	// If between 50% and 75% of the letters are uppercase,
	// then lowercase the whole text
	if (
		text.replaceAll(/[^A-Z]/g, '').length > text.length * 0.5 &&
		text.replaceAll(/[^A-Z]/g, '').length < text.length * 0.75
	) {
		return text.toLowerCase()
	}

	return text
}

function stripQuotes(text: string) {
	return text.replaceAll(/^["']|["']$/g, '')
}

function getNameFromEmail(name: string) {
	if (name.includes('@')) {
		return name.split('@')[0].replaceAll(/[_-]/g, ' ')
	}

	return name
}

type LicenseEntry = CollectionEntry<'acknowledgments'>['data'][string][number]

const { scope } = Astro.props

const acknowledgmentsCollection = await getCollection(
	'acknowledgments',
	(f) => scope === 'all' || f.id === `acknowledgments-${scope}`,
)

// Each collection entry
// eslint-disable-next-line unicorn/no-array-reduce
const data = acknowledgmentsCollection.reduce<LicenseEntry[]>(
	(acc, collection) => [...acc, ...Object.values(collection.data).flat()],
	[],
)

// Get unique list of publisher names
const names = data
	// eslint-disable-next-line unicorn/no-array-reduce
	.reduce((acc: string[], { author }) => {
		if (author) {
			// Split compound comma-delimited publishers as needed
			for (const subItem of author.split(/\s*(?:\sand\s|,|&)\s*/)) {
				const subPublisher = titleCase(stopShouting(stripQuotes(getNameFromEmail(subItem.trim()))))
				if (subPublisher && !acc.includes(subPublisher)) {
					acc.push(subPublisher)
				}
			}
		}

		return acc
	}, [])
	// Exclude me and some other vague things
	.filter((name) => !['contributors', 'eric mika', 'inc.', 'llc'].includes(name.toLowerCase()))
	// No emoji please
	.filter((name) => !/\p{Emoji}/u.test(name))
	// Filter out case-insensitive duplicates, but keep the version with the most capitalization
	.filter((name, index, array) => {
		const lower = name.toLowerCase()
		const matchIndex = array.findIndex((n) => n.toLowerCase() === lower)
		return matchIndex === index
	})
	// Remove duplicate names like Microsoft, Microsoft Corp., Microsoft Corporation, keep the one without the Corp or Corporation suffix
	.filter((name, index, array) => {
		const lower = name.toLowerCase()
		const matchIndex = array.findIndex(
			// eslint-disable-next-line regexp/no-unused-capturing-group
			(n) => n.toLowerCase().replace(/(corp\.|corporation|inc\.)$/, '') === lower,
		)
		return matchIndex === index
	})
	// Don't break names
	.map((n) => n.replace(/ /, '\u00A0'))
	// Sort by last name
	.sort((a, b) => a.localeCompare(b))
---

{names.length > 0 && names.join(', ')}
