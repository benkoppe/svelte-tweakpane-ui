---
import type { ComponentProp, ConditionsRecord } from '../../utils/prop-utils';
import Flags from './Flags.astro';
import Heading from './Heading.astro';
import { marked } from 'marked';

type Props = {
	conditionData?: ConditionsRecord;
	data: ComponentProp[];
	monoTable?: boolean;
	showDefault?: boolean;
	showExample?: boolean;
	showFlags?: boolean;
};

function cleanType(type: string): string {
	return type.replaceAll('"', "'").replaceAll('&quot;', '&apos;').replace(' | undefined', '');
}

function cleanDefault(defaultValue: string | undefined): string {
	if (defaultValue === undefined) return '';
	return marked.parseInline(defaultValue) as string;
}

function cleanExample(exampleValue: string | undefined): string {
	if (exampleValue === undefined) return '';
	return marked.parseInline(exampleValue) as string;
}

function isReadonly(prop: ComponentProp): boolean {
	return 'readonly' in prop.jsDocs;
}

function isRequired(type: string): boolean {
	return !type.includes('undefined');
}

function getFlags(prop: ComponentProp, dynamic: boolean = false): string[] {
	const flags = Object.keys(prop.jsDocs)
		// Default gets its own row, and so does example
		.filter((key) => key !== 'default')
		.filter((key) => key !== 'example')
		.map((key) => key);

	// Have to pull "required" from type
	if (isRequired(prop.type)) {
		flags.push('required');
	} else {
		flags.push('optional');
	}

	if (dynamic) {
		flags.push('dynamic');
	}

	return flags;
}

const {
	conditionData = {},
	data,
	monoTable = false,
	showDefault = true,
	showExample = true,
	showFlags = true
} = Astro.props;
---

{
	monoTable ? (
		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Description</th>
					<th>Type</th>
					{showDefault && <th>Default</th>}
					{showFlags && <th>Flags</th>}
				</tr>
			</thead>
			<tbody>
				{data.map((prop) => (
					<tr>
						<td>
							<code>{prop.name}</code>
						</td>
						<td set:html={marked.parse(prop.doc, {})} />
						<td>
							<code>{cleanType(prop.type)}</code>
						</td>
						{showDefault && <td set:html={cleanDefault(prop.jsDocs.default)} />}
						{showFlags && <td>{getFlags(prop).join(' ')}</td>}
					</tr>
				))}
			</tbody>
		</table>
	) : (
		data.map((prop) => (
			<table>
				<tbody>
					<tr>
						<td class="prop-name" colspan="2">
							<span class="prop-heading">
								<Heading level={3} set:html={prop.name} />
								{showFlags && (
									<Flags names={getFlags(prop, conditionData[prop.name] !== undefined)} />
								)}
							</span>
						</td>
					</tr>
					<tr>
						<th>Description</th>
						<td set:html={marked.parse(prop.doc, {})} />
					</tr>
					<tr>
						<th>Type</th>
						<td>
							<code>{cleanType(prop.type)}</code>
						</td>
					</tr>
					{showDefault && !isRequired(prop.type) && !isReadonly(prop) && (
						<tr>
							<th>Default</th>
							<td set:html={cleanDefault(prop.jsDocs.default)} />
						</tr>
					)}
					{showExample && 'example' in prop.jsDocs && (
						<tr>
							<th>Example</th>
							<td set:html={cleanExample(prop.jsDocs.example)} />
						</tr>
					)}
					{conditionData[prop.name] !== undefined && (
						<tr>
							<th>Conditions</th>
							<td>
								Available when
								{/* set:text below works around prettier */}
								{Object.values(conditionData[prop.name])
									.map((value) => (
										<code set:text={`${Object.keys(value)[0]}="${Object.values(value)[0]}"`} />
									))
									.reduce((previous, current) => [previous, ' or ', current])}
							</td>
						</tr>
					)}
				</tbody>
			</table>
		))
	)
}

<style>
	table {
		overflow: visible !important; /* for anchor links */
		table-layout: fixed;
		margin-bottom: 4.5rem;
	}

	table tbody {
		display: table;
		min-width: 100%;
	}

	tr {
		background: var(--sl-color-gray-7) !important;
	}

	th {
		width: 1px;
		font-weight: 500;
		color: var(--sl-color-gray-4);
		/* font-size: var(--sl-text-sm); */
		/* background: var(--sl-color-gray-6) !important; */
		vertical-align: top;
	}

	td {
		width: auto;
	}

	table td.prop-name :global(h3) {
		display: inline;
		justify-self: flex-start;
		font-family: var(--sl-font-system-mono);
		font-size: var(--sl-text-xl);
		font-weight: normal;
	}

	span.prop-heading {
		display: flex;
		flex-wrap: wrap;
		row-gap: 0.5em;
		align-items: end;
		justify-content: space-between;
	}

	table th {
		text-align: left;
	}
</style>
