---
import type { Props as StarlightProps } from "@astrojs/starlight/props";
// bypasses any markdown customization in starlight...
import { marked } from "marked";
import Heading from "./Heading.astro";
import PropTable from "./PropTable.astro";
import ExampleWrapper from "../examples/ExampleWrapper.svelte";
import DynamicPropAdmonition from "./DynamicPropAdmonition.md";
import { Tabs, TabItem } from "@astrojs/starlight/components";
import { slug } from "github-slugger";

interface Props {
  componentData: StarlightProps["entry"]["data"]["componentData"];
  greeting?: string;
}

function linkifyComponentReferences(
  str: string,
  validComponentNames: string[],
  base: string = "",
  markdownStyleLink: boolean = true,
): string {
  return str.replaceAll(
    /(`?)<([A-Z]\w+)>(`?)/g,
    (match, prefix, name, postfix) => {
      if (validComponentNames.includes(name)) {
        // Replace with link
        if (markdownStyleLink) {
          return `[${prefix ?? ""}<${name}>${
            postfix ?? ""
          }](${base}/docs/components/${slug(name)})`;
        } else {
          return `${prefix ?? ""}<a href="${base}/docs/components/${slug(
            name,
          )}">&lt;${name}&gt;</a>${postfix ?? ""}`;
        }
      } else {
        // No replacement, return the original match
        return match;
      }
    },
  );
}

const { componentData: data } = Astro.props;

// for automatic component linking...
// all components except for the current one are valid
const validComponentNames =
  Object.keys(
    import.meta.glob("../../content/docs/docs/components/*.md", {
      as: "json",
      eager: false,
    }),
  )
    .map((path) => {
      return path.match(/\/([^/]+)\.md$/)![1];
    })
    .filter((name) => {
      return name !== data?.name;
    }) ?? [];

const ExampleCode = (
  await import(`../examples/markdown/${data?.name}Example.md`)
).default;

const hasExample = !!data?.jsDocs?.example;
const hasProps = !!data?.props.length;
const hasDynamicProps = !!data?.dynamicProps?.length;
const hasEvents = !!data?.events.length;
const hasSlots = !!data?.slots.length;
---

{
  data && (
    <>
      <Fragment
        set:html={marked.parse(
          linkifyComponentReferences(data.doc, validComponentNames, "", true),
        )}
      />
      {hasExample && (
        <>
          <Heading level={2}>Example</Heading>
          <div class="not-content" style="width: 400px;">
            <ExampleWrapper name={data.name} client:only="svelte" />
          </div>
          <ExampleCode />
        </>
      )}
      {hasProps && (
        <>
          <Heading level={2}>Props</Heading>
          {hasDynamicProps ? (
            <>
              <DynamicPropAdmonition />
              <Tabs>
                {data.dynamicProps?.map((propInfo) => {
                  return (
                    <TabItem label={`Props when ${propInfo.description}`}>
                      <PropTable data={propInfo.props} />
                    </TabItem>
                  );
                })}
              </Tabs>
            </>
          ) : (
            <PropTable data={data.props} />
          )}
        </>
      )}
      {hasEvents && <Heading level={2}>Events</Heading>}
      {hasSlots && <Heading level={2}>Slots</Heading>}
    </>
  )
}
