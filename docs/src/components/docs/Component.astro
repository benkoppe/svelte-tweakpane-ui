---
import { type ComponentData, allPropConditions, allProps } from '../../utils/prop-utils';
import DynamicPropAdmonition from './DynamicPropAdmonition.mdx';
import ExampleWrapper from './ExampleWrapper.astro';
import Heading from './Heading.astro';
import PropTable from './PropTable.astro';
// Bypasses any markdown customization in starlight...
import { marked } from 'marked';

type Props = {
	componentData: ComponentData;
};

const { componentData: data } = Astro.props;

// eslint-disable-next-line @typescript-eslint/naming-convention, unicorn/no-await-expression-member
const ExampleCode = (await import(`../../examples/components/${data?.name}Example.md`)).default;

const hasExample = Boolean(data?.jsDocs?.example);
const hasProps = Boolean(data?.props.length);
const hasDynamicProps = Boolean(data?.dynamicProps?.length);
const hasEvents = Boolean(data?.events.length);
const hasSlots = Boolean(data?.slots.length);
---

{
	data && (
		<>
			<Fragment set:html={marked.parse(data.doc)} />
			{hasExample && (
				<>
					<hr />
					<Heading level={2}>Example</Heading>
					<Heading level={3}>Demo</Heading>
					<ExampleWrapper>
						<slot />
					</ExampleWrapper>
					<Heading level={3}>Code</Heading>
					<ExampleCode />
				</>
			)}
			{hasProps && (
				<>
					<hr />
					<Heading level={2}>Props</Heading>
					{hasDynamicProps ? (
						<>
							<DynamicPropAdmonition />
							<PropTable conditionData={allPropConditions(data)} data={allProps(data)} />
						</>
					) : (
						<PropTable data={data.props} />
					)}
				</>
			)}
			{hasEvents && (
				<>
					<hr />
					<Heading level={2}>Events</Heading>
					<PropTable data={data.events} showDefault={false} showFlags={false} />
				</>
			)}
			{hasSlots && (
				<>
					<hr />
					<Heading level={2}>Slots</Heading>
					<PropTable data={data.slots} showDefault={false} showFlags={false} />
				</>
			)}
		</>
	)
}
